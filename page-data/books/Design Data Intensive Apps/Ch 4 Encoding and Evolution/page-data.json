{
    "componentChunkName": "component---node-modules-gatsby-theme-primer-wiki-src-templates-post-query-js",
    "path": "/books/Design Data Intensive Apps/Ch 4 Encoding and Evolution/",
    "result": {"data":{"mdx":{"id":"9d1d0a39-6255-51b0-9e3d-81d370dad498","tableOfContents":{"items":[{"url":"#formats-for-encoding-data","title":"Formats for Encoding Data"},{"url":"#modes-of-dataflow","title":"Modes of Dataflow","items":[{"url":"#dataflow-through-databases","title":"Dataflow through databases"},{"url":"#dataflow-through-services-rest-and-rpc","title":"Dataflow through Services: REST and RPC"}]},{"url":"#summary","title":"Summary"}]},"fields":{"title":"Formats for Encoding Data","slug":"/books/Design Data Intensive Apps/Ch 4 Encoding and Evolution/","url":"https://thomassajot.github.io/brain-dam/brain-dam/books/Design Data Intensive Apps/Ch 4 Encoding and Evolution/","editUrl":"https://github.com/thomassajot/brain-dam/tree/main/books/Design Data Intensive Apps/Ch 4 Encoding and Evolution.md","lastUpdatedAt":"2022-06-02T10:26:57.000Z","lastUpdated":"6/2/2022","gitCreatedAt":"2022-06-02T10:26:57.000Z","shouldShowTitle":false},"frontmatter":{"title":"","description":null,"imageAlt":null,"tags":[],"date":null,"dateModified":null,"language":null,"seoTitle":null,"image":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"formats-for-encoding-data\"\n  }, \"Formats for Encoding Data\"), mdx(\"h1\", {\n    \"id\": \"modes-of-dataflow\"\n  }, \"Modes of Dataflow\"), mdx(\"h2\", {\n    \"id\": \"dataflow-through-databases\"\n  }, \"Dataflow through databases\"), mdx(\"h2\", {\n    \"id\": \"dataflow-through-services-rest-and-rpc\"\n  }, \"Dataflow through Services: REST and RPC\"), mdx(\"p\", null, \"When we need 2 services to communicate over a network, we need to define the schema of the requests and responses. Data will be exchanged between the client and the server. If HTTPS is used to transmit information, we call this a WebService.\"), mdx(\"p\", null, \"So far, this is similar to the communication btw a client and a database. However, in the case of services we do not want the client to run any types of query (contrary to the database). Services exposes specific API that allows inputs and outputs that are predetermined by the business logic. This restriction provides a degree of encapsulation.\"), mdx(\"h4\", {\n    \"id\": \"rest\"\n  }, \"REST\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"REST\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SOAP\"), \" are two popular method to agree on what the communication Schema for WebServices looks like. But SOAP is falling out of favour so forget about it.\"), mdx(\"h4\", {\n    \"id\": \"rpc\"\n  }, \"RPC\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"RPC\"), \": Remote procedure call: tries to make a request to a remote network service look the same as calling a function or method in your programming language, within the same process. Such abstraction is called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"location transparency\\\"\"), \".\")), mdx(\"p\", null, \"The book mentions many downsides to RPC. I disagree with these points. The main argument is that the author combines the fact that RPC makes a server call look like a regular function call. I believe that the programmer / user of the API knows that a RPC call does not behave in the same way as a regular function call and is faced with the same issues that would arise nonetheless when using REST.\"), mdx(\"p\", null, \"The issue related to lost responses is the same between REST and RPC.\\nOverall RPC is more about the simplicity of sending the data to the other server. It is miss-leading to think that the user / programmer should not benefit from the nice syntax of native function to perform these communication because these function would behave differently. It is up to the user to know what exception can be raised by looking at the documentation. \"), mdx(\"p\", null, \"However, it is true that the user has to know how to handle Time out and lost responses or idempotent operations. But this knowledge should be acquired when using both REST and RPC.\"), mdx(\"h4\", {\n    \"id\": \"rest-vs-rpc\"\n  }, \"REST vs RPC\"), mdx(\"p\", null, \"Custom RPC protocols with a binary encoding format can achieve better performance than something generic like JSON over REST. But REST API are easier for experimentation and debugging. \"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I recommend to use RPC for internal services which are owned by the same company. It makes is simpler to maintain the schema as well. REST is preferable for public endpoints. \")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I enjoy to use gRPC because the schema is enforced by code\"), \". In the case of REST, one endpoints uses a specific schema and the schema is enforced via testing. Which is much more brittle and some edge cases could be missed. It is preferable to use gRPC which requires the creation of a Protocol Buffer schema which both clients and server have to use. \"), mdx(\"h4\", {\n    \"id\": \"message-passing-dataflow\"\n  }, \"Message-passing Dataflow\"), mdx(\"div\", {\n    \"className\": \"mermaid\",\n    \"data-processed\": \"true\"\n  }, mdx(\"svg\", {\n    parentName: \"div\",\n    \"id\": \"mermaid-1654374248704\",\n    \"width\": \"100%\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"xmlnsXLink\": \"http://www.w3.org/1999/xlink\",\n    \"height\": \"54\",\n    \"style\": {\n      \"maxWidth\": \"311.15625px\"\n    },\n    \"viewBox\": \"0 0 311.15625 54\"\n  }, mdx(\"style\", {\n    parentName: \"svg\"\n  }, \"#mermaid-1654374248704 {font-family:\\\"trebuchet ms\\\",verdana,arial,sans-serif;font-size:16px;fill:#333;}#mermaid-1654374248704 .error-icon{fill:#552222;}#mermaid-1654374248704 .error-text{fill:#552222;stroke:#552222;}#mermaid-1654374248704 .edge-thickness-normal{stroke-width:2px;}#mermaid-1654374248704 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1654374248704 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1654374248704 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1654374248704 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1654374248704 .marker{fill:#333333;stroke:#333333;}#mermaid-1654374248704 .marker.cross{stroke:#333333;}#mermaid-1654374248704 svg{font-family:\\\"trebuchet ms\\\",verdana,arial,sans-serif;font-size:16px;}#mermaid-1654374248704 .label{font-family:\\\"trebuchet ms\\\",verdana,arial,sans-serif;color:#333;}#mermaid-1654374248704 .cluster-label text{fill:#333;}#mermaid-1654374248704 .cluster-label span{color:#333;}#mermaid-1654374248704 .label text,#mermaid-1654374248704 span{fill:#333;color:#333;}#mermaid-1654374248704 .node rect,#mermaid-1654374248704 .node circle,#mermaid-1654374248704 .node ellipse,#mermaid-1654374248704 .node polygon,#mermaid-1654374248704 .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#mermaid-1654374248704 .node .label{text-align:center;}#mermaid-1654374248704 .node.clickable{cursor:pointer;}#mermaid-1654374248704 .arrowheadPath{fill:#333333;}#mermaid-1654374248704 .edgePath .path{stroke:#333333;stroke-width:2.0px;}#mermaid-1654374248704 .flowchart-link{stroke:#333333;fill:none;}#mermaid-1654374248704 .edgeLabel{background-color:#e8e8e8;text-align:center;}#mermaid-1654374248704 .edgeLabel rect{opacity:0.5;background-color:#e8e8e8;fill:#e8e8e8;}#mermaid-1654374248704 .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#mermaid-1654374248704 .cluster text{fill:#333;}#mermaid-1654374248704 .cluster span{color:#333;}#mermaid-1654374248704 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:\\\"trebuchet ms\\\",verdana,arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1654374248704 :root{--mermaid-font-family:\\\"trebuchet ms\\\",verdana,arial,sans-serif;}\"), mdx(\"g\", {\n    parentName: \"svg\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"output\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"clusters\"\n  }), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgePaths\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgePath LS-C LE-B\",\n    \"id\": \"L-C-B\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"path\", {\n    parentName: \"g\",\n    \"className\": \"path\",\n    \"d\": \"M68.90625,27L73.07291666666667,27C77.23958333333333,27,85.57291666666667,27,93.90625,27C102.23958333333333,27,110.57291666666667,27,114.73958333333333,27L118.90625,27\",\n    \"markerEnd\": \"url(#arrowhead12)\",\n    \"style\": {\n      \"fill\": \"none\"\n    }\n  }), mdx(\"defs\", {\n    parentName: \"g\"\n  }, mdx(\"marker\", {\n    parentName: \"defs\",\n    \"id\": \"arrowhead12\",\n    \"viewBox\": \"0 0 10 10\",\n    \"refX\": \"9\",\n    \"refY\": \"5\",\n    \"markerUnits\": \"strokeWidth\",\n    \"markerWidth\": \"8\",\n    \"markerHeight\": \"6\",\n    \"orient\": \"auto\"\n  }, mdx(\"path\", {\n    parentName: \"marker\",\n    \"d\": \"M 0 0 L 10 5 L 0 10 z\",\n    \"className\": \"arrowheadPath\",\n    \"style\": {\n      \"strokeWidth\": \"1\",\n      \"strokeDasharray\": \"1, 0\"\n    }\n  })))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgePath LS-B LE-S\",\n    \"id\": \"L-B-S\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"path\", {\n    parentName: \"g\",\n    \"className\": \"path\",\n    \"d\": \"M186.03125,27L190.19791666666666,27C194.36458333333334,27,202.69791666666666,27,211.03125,27C219.36458333333334,27,227.69791666666666,27,231.86458333333334,27L236.03125,27\",\n    \"markerEnd\": \"url(#arrowhead13)\",\n    \"style\": {\n      \"fill\": \"none\"\n    }\n  }), mdx(\"defs\", {\n    parentName: \"g\"\n  }, mdx(\"marker\", {\n    parentName: \"defs\",\n    \"id\": \"arrowhead13\",\n    \"viewBox\": \"0 0 10 10\",\n    \"refX\": \"9\",\n    \"refY\": \"5\",\n    \"markerUnits\": \"strokeWidth\",\n    \"markerWidth\": \"8\",\n    \"markerHeight\": \"6\",\n    \"orient\": \"auto\"\n  }, mdx(\"path\", {\n    parentName: \"marker\",\n    \"d\": \"M 0 0 L 10 5 L 0 10 z\",\n    \"className\": \"arrowheadPath\",\n    \"style\": {\n      \"strokeWidth\": \"1\",\n      \"strokeDasharray\": \"1, 0\"\n    }\n  }))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgeLabels\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgeLabel\",\n    \"transform\": \"\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(0,0)\",\n    \"className\": \"label\"\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"0\",\n    \"ry\": \"0\",\n    \"width\": \"0\",\n    \"height\": \"0\"\n  }), mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"0\",\n    \"height\": \"0\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"id\": \"L-L-C-B\",\n    \"className\": \"edgeLabel L-LS-C' L-LE-B\"\n  }))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgeLabel\",\n    \"transform\": \"\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(0,0)\",\n    \"className\": \"label\"\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"0\",\n    \"ry\": \"0\",\n    \"width\": \"0\",\n    \"height\": \"0\"\n  }), mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"0\",\n    \"height\": \"0\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"id\": \"L-L-B-S\",\n    \"className\": \"edgeLabel L-LS-B' L-LE-S\"\n  })))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"nodes\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"node default\",\n    \"id\": \"flowchart-C-3\",\n    \"transform\": \"translate(38.453125,27)\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"0\",\n    \"ry\": \"0\",\n    \"x\": \"-30.453125\",\n    \"y\": \"-19\",\n    \"width\": \"60.90625\",\n    \"height\": \"38\",\n    \"className\": \"label-container\"\n  }), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"label\",\n    \"transform\": \"translate(0,0)\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(-20.453125,-9)\"\n  }, mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"40.90625\",\n    \"height\": \"18\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, \"Client\"))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"node default\",\n    \"id\": \"flowchart-B-4\",\n    \"transform\": \"translate(152.46875,27)\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"5\",\n    \"ry\": \"5\",\n    \"x\": \"-33.5625\",\n    \"y\": \"-19\",\n    \"width\": \"67.125\",\n    \"height\": \"38\",\n    \"className\": \"label-container\"\n  }), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"label\",\n    \"transform\": \"translate(0,0)\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(-23.5625,-9)\"\n  }, mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"47.125\",\n    \"height\": \"18\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, \"Broker\"))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"node default\",\n    \"id\": \"flowchart-S-5\",\n    \"transform\": \"translate(269.59375,27)\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"0\",\n    \"ry\": \"0\",\n    \"x\": \"-33.5625\",\n    \"y\": \"-19\",\n    \"width\": \"67.125\",\n    \"height\": \"38\",\n    \"className\": \"label-container\"\n  }), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"label\",\n    \"transform\": \"translate(0,0)\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(-23.5625,-9)\"\n  }, mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"47.125\",\n    \"height\": \"18\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, \"Server\")))))))))), mdx(\"p\", null, \"Using a Message broker has several advantages: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Improve sys reliability: acts as a buffer if the recipient is unavailable. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Prevent lost msg: automatically redeliver messages to a process that has crashed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Decouples sender and recipient: \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the sender does not need to know PORT and IP of receiver.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The sender does not know the receiver or how many.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Allows one msg to be send to several recipients.\")), mdx(\"p\", null, \"Downside is that the communication becomes one way. if you want to have it two way, you need to add a separate channel. Thus this communication pattern is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"asynchronous\"), \".\"), mdx(\"h5\", {\n    \"id\": \"distributed-actor-frameworks\"\n  }, \"Distributed actor frameworks\"), mdx(\"p\", null, \"[...]\"), mdx(\"h1\", {\n    \"id\": \"summary\"\n  }, \"Summary\"), mdx(\"p\", null, \"As services have to communicate between themselves, we looked at how to encode messages (JSON, binary, with schema...).\\nIn order to update services, we have a to still be able to handle older and newer message format. Being \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"backward\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"forward\"), \" compatible allows to gradually update components instead of all services at once. However, it is also a bit of a challenge. Schema evolution is something to be mindful of but [\", \"[Thrift]\", \"] and [\", \"[Protocol Buffers]\", \"] helps you to achieve it.\"), mdx(\"p\", null, \"[\", \"[Rolling updates]\", \"] allow new versions of a service to be released without downtime. Since different services of different versions will coexists, we need backward and forward compatibility.\"), mdx(\"p\", null, \"We have seen how to communicate between services: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Databases\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"REST / SOAP \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"RPC \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Asynchronous message passing using brokers or actors.\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"# Formats for Encoding Data\n# Modes of Dataflow\n## Dataflow through databases\n## Dataflow through Services: REST and RPC\nWhen we need 2 services to communicate over a network, we need to define the schema of the requests and responses. Data will be exchanged between the client and the server. If HTTPS is used to transmit information, we call this a WebService.\n\nSo far, this is similar to the communication btw a client and a database. However, in the case of services we do not want the client to run any types of query (contrary to the database). Services exposes specific API that allows inputs and outputs that are predetermined by the business logic. This restriction provides a degree of encapsulation.\n\n#### REST\n**REST** and **SOAP** are two popular method to agree on what the communication Schema for WebServices looks like. But SOAP is falling out of favour so forget about it.\n\n#### RPC\n> **RPC**: Remote procedure call: tries to make a request to a remote network service look the same as calling a function or method in your programming language, within the same process. Such abstraction is called *\"location transparency\"*.\n\nThe book mentions many downsides to RPC. I disagree with these points. The main argument is that the author combines the fact that RPC makes a server call look like a regular function call. I believe that the programmer / user of the API knows that a RPC call does not behave in the same way as a regular function call and is faced with the same issues that would arise nonetheless when using REST.\n\nThe issue related to lost responses is the same between REST and RPC. \nOverall RPC is more about the simplicity of sending the data to the other server. It is miss-leading to think that the user / programmer should not benefit from the nice syntax of native function to perform these communication because these function would behave differently. It is up to the user to know what exception can be raised by looking at the documentation. \n\nHowever, it is true that the user has to know how to handle Time out and lost responses or idempotent operations. But this knowledge should be acquired when using both REST and RPC.\n\n\n#### REST vs RPC\nCustom RPC protocols with a binary encoding format can achieve better performance than something generic like JSON over REST. But REST API are easier for experimentation and debugging. \n\n> I recommend to use RPC for internal services which are owned by the same company. It makes is simpler to maintain the schema as well. REST is preferable for public endpoints. \n\n**I enjoy to use gRPC because the schema is enforced by code**. In the case of REST, one endpoints uses a specific schema and the schema is enforced via testing. Which is much more brittle and some edge cases could be missed. It is preferable to use gRPC which requires the creation of a Protocol Buffer schema which both clients and server have to use. \n\n\n#### Message-passing Dataflow\n\n```mermaid\ngraph LR;\n\nC[Client] --> B(Broker) --> S[Server]\n```\n\nUsing a Message broker has several advantages: \n- Improve sys reliability: acts as a buffer if the recipient is unavailable. \n- Prevent lost msg: automatically redeliver messages to a process that has crashed.\n- Decouples sender and recipient: \n\t- the sender does not need to know PORT and IP of receiver.\n\t- The sender does not know the receiver or how many.\n- Allows one msg to be send to several recipients.\n\nDownside is that the communication becomes one way. if you want to have it two way, you need to add a separate channel. Thus this communication pattern is `asynchronous`.\n\n##### Distributed actor frameworks\n[...]\n\n\n# Summary\nAs services have to communicate between themselves, we looked at how to encode messages (JSON, binary, with schema...). \nIn order to update services, we have a to still be able to handle older and newer message format. Being `backward` and `forward` compatible allows to gradually update components instead of all services at once. However, it is also a bit of a challenge. Schema evolution is something to be mindful of but [[Thrift]] and [[Protocol Buffers]] helps you to achieve it.\n\n[[Rolling updates]] allow new versions of a service to be released without downtime. Since different services of different versions will coexists, we need backward and forward compatibility.\n\nWe have seen how to communicate between services: \n- Databases\n- REST / SOAP \n- RPC \n- Asynchronous message passing using brokers or actors.\n\n","excerpt":"Formats for Encoding Data Modes of Dataflow Dataflow through databases Dataflow through Services: REST and RPC When we need 2 services to c…","outboundReferences":[],"inboundReferences":[]},"tagsOutbound":{"nodes":[]}},"pageContext":{"tags":[],"slug":"/books/Design Data Intensive Apps/Ch 4 Encoding and Evolution/","sidebarItems":[{"title":"Categories","items":[{"title":"Azure","url":"","items":[{"title":"Azure Pipeline","url":"/Azure/Azure pipeline/","items":[]},{"title":"Documentation","url":"/Azure/Azure-ml/","items":[]}]},{"title":"Books","url":"","items":[{"title":"All of Statistics - Larry - Unfinished","url":"","items":[{"title":"Exercices","url":"/books/All of Statistics - Larry - Unfinished/Chapter 1/","items":[]}]},{"title":"Design Data Intensive Apps","url":"","items":[{"title":"Ch 5 Replication","url":"/books/Design Data Intensive Apps/Ch 5 Replication/","items":[]},{"title":"Formats for Encoding Data","url":"/books/Design Data Intensive Apps/Ch 4 Encoding and Evolution/","items":[]},{"title":"Hello world","url":"/books/Design Data Intensive Apps/test slides/","items":[]}]}]},{"title":"Brain Dam","url":"/","items":[]},{"title":"Courses","url":"","items":[{"title":"AlgoExpert","url":"","items":[{"title":"Design Facebook News Feed","url":"/Courses/AlgoExpert/Algo Expert - System Design interview/","items":[]},{"title":"General tips","url":"/Courses/AlgoExpert/Algo Expert - Behavioral interview/","items":[]}]},{"title":"Coursera","url":"","items":[{"title":"Learning How to Learn","url":"","items":[{"title":"Chunking","url":"/Courses/Coursera/Learning how to learn/Chunking/","items":[]},{"title":"Einstellung","url":"/Courses/Coursera/Learning how to learn/Einstellung/","items":[]},{"title":"Habits","url":"/Courses/Coursera/Learning how to learn/Habits/","items":[]},{"title":"Illusion of Competence","url":"/Courses/Coursera/Learning how to learn/Illusion of Competence/","items":[]},{"title":"Imposter Syndrome","url":"/Courses/Coursera/Learning how to learn/Imposter syndrome/","items":[]},{"title":"Overlearning","url":"/Courses/Coursera/Learning how to learn/Overlearning/","items":[]},{"title":"Procrastination","url":"/Courses/Coursera/Learning how to learn/Procrastination/","items":[]},{"title":"Tasks Lists","url":"/Courses/Coursera/Learning how to learn/Tasks lists/","items":[]},{"title":"Week 1","url":"/Courses/Coursera/Learning how to learn/Coursera - Learning How to Learn/","items":[]}]}]},{"title":"Educative","url":"","items":[{"title":"Example: Video Recommendation","url":"/Courses/Educative/Machine Learning System Design/","items":[]}]},{"title":"Meta - Field Guide to ML","url":"","items":[{"title":"Introduction","url":"/Courses/Meta - field guide to ML/Field guide to ML/","items":[]}]}]},{"title":"Engineering","url":"","items":[{"title":"ACID","url":"/Engineering/Relational Databases/","items":[]},{"title":"API Design","url":"/Engineering/API Design/","items":[]},{"title":"Blob Store","url":"/Engineering/Specialized Storage Paradigms/","items":[]},{"title":"Cache for read","url":"/Engineering/Caching/","items":[]},{"title":"Client-Server Model","url":"/Engineering/Client-Server Model/","items":[]},{"title":"Configuration","url":"/Engineering/Configuration/","items":[]},{"title":"Consistent hashing with bounded load","url":"/Engineering/Consistent hashing/","items":[]},{"title":"Design Documents","url":"/Engineering/Design Documents/","items":[]},{"title":"Distributed Hash Table","url":"/Engineering/Distributed Hash Table/","items":[]},{"title":"Encryption","url":"/Engineering/Security and HTTPS/","items":[]},{"title":"Etcd","url":"/Engineering/Etcd/","items":[]},{"title":"Feature Flags","url":"/Engineering/Feature Flags/","items":[]},{"title":"Forward Proxy","url":"/Engineering/Proxies/","items":[]},{"title":"How does the load balancer work ?","url":"/Engineering/Load Balancer/","items":[]},{"title":"How to implement Leader election for your service ?","url":"/Engineering/Leader Election/","items":[]},{"title":"Idempotent Operation","url":"/Engineering/Idempotent Operation/","items":[]},{"title":"Important points","url":"/Engineering/MapReduce/","items":[]},{"title":"Latency","url":"/Engineering/Latency and Throughput/","items":[]},{"title":"Logging","url":"/Engineering/Logging and Monitoring/","items":[]},{"title":"Other strategy","url":"/Engineering/Jump hashing/","items":[]},{"title":"Other strategy","url":"/Engineering/Rendez-vous Hashing/","items":[]},{"title":"Polling","url":"/Engineering/Polling and Streaming/","items":[]},{"title":"Prometheus","url":"/Engineering/Prometheus/","items":[]},{"title":"Redis","url":"/Engineering/Redis/","items":[]},{"title":"Replication","url":"/Engineering/Replication/","items":[]},{"title":"Sharding or Partitioning","url":"/Engineering/Sharding or Partitioning/","items":[]},{"title":"SLA / SLO","url":"/Engineering/Availability/","items":[]},{"title":"Socket","url":"/Engineering/Socket/","items":[]},{"title":"Storage Concept","url":"/Engineering/Storage concept/","items":[]},{"title":"Tools","url":"/Engineering/Key-Value Stores/","items":[]},{"title":"Tools","url":"/Engineering/Peer-To-Peer Networks/","items":[]},{"title":"Tools","url":"/Engineering/Publish-Subscribe Pattern/","items":[]},{"title":"Tools","url":"/Engineering/Rate Limiting/","items":[]},{"title":"Zookeeper","url":"/Engineering/Zookeeper/","items":[]}]},{"title":"Finance","url":"","items":[{"title":"Growth shares","url":"/Finance/Growth Shares/","items":[]}]},{"title":"ML","url":"","items":[{"title":"Constrained Optimization","url":"/ML/Constrained optimization/","items":[]},{"title":"Coordinate Descent","url":"/ML/Coordinate descent/","items":[]},{"title":"Determinant","url":"/ML/Determinant/","items":[]},{"title":"Dirichlet Distribution","url":"/ML/Dirichlet distribution/","items":[]},{"title":"Eigendecomposition","url":"/ML/Eigendecomposition/","items":[]},{"title":"Exploitation vs exploration","url":"/ML/Multi-armed bandit (AB testing)/","items":[]},{"title":"Feature Hashing","url":"/ML/Feature hashing/","items":[]},{"title":"Frequentist A/B testing","url":"/ML/Frequentist AB testing/","items":[]},{"title":"Gradient","url":"/ML/Gradient/","items":[]},{"title":"Gradient Descend","url":"/ML/Gradient Descend/","items":[]},{"title":"Graph Neural Network","url":"/ML/GNN/","items":[]},{"title":"Hessian","url":"/ML/Hessian/","items":[]},{"title":"Jacobian","url":"/ML/Jacobian/","items":[]},{"title":"Kernel Trick","url":"/ML/Kernel Trick/","items":[]},{"title":"KKT conditions","url":"/ML/KKT/","items":[]},{"title":"Line Search","url":"/ML/Line Search/","items":[]},{"title":"Links","url":"/ML/Latent Dirichlet Allocation/","items":[]},{"title":"Maths","url":"/ML/PCA/","items":[]},{"title":"Matrix Inverse","url":"/ML/Matrix inverse/","items":[]},{"title":"Moore-Penrose Pseudoinverse","url":"/ML/Moore-Penrose Pseudoinverse/","items":[]},{"title":"Named Entity Recognition (NER)","url":"/ML/Named Entity Recognition (NER)/","items":[]},{"title":"Newton's Method","url":"/ML/Newton's method/","items":[]},{"title":"Norms","url":"/ML/Norms/","items":[]},{"title":"Oversampling","url":"/ML/Handle Imablanced datasets/","items":[]},{"title":"Overview","url":"/ML/RANSAC/","items":[]},{"title":"Parameter Estimation","url":"/ML/Parameter estimation/","items":[]},{"title":"Positive Definite Matrix","url":"/ML/Positive Definite Matrix/","items":[]},{"title":"Regression Losses","url":"/ML/Regression losses/","items":[]},{"title":"Singular Value Decomposition (SVD)","url":"/ML/Singular Value Decomposition (SVD)/","items":[]},{"title":"Symmetric Matrix","url":"/ML/Symmetric matrix/","items":[]},{"title":"The ultimate understanding of the Naive Bayes Classifier, version 8","url":"/ML/Naive Bayes Classifier/","items":[]},{"title":"Thompson Sampling","url":"/ML/Thompson Sampling/","items":[]},{"title":"Tool","url":"/ML/Bayesian AB testing/","items":[]},{"title":"Trace of Matrix","url":"/ML/Trace of matrix/","items":[]},{"title":"Trust Region","url":"/ML/trust region/","items":[]},{"title":"Variance and Standard Error","url":"/ML/Variance and Standard error/","items":[]}]},{"title":"Papers","url":"","items":[{"title":"Questions","url":"/Papers/VICREG  variance-invariance-covariance regulaization for self-supervised Learning/","items":[]}]},{"title":"Programming","url":"","items":[{"title":"A- What is Dynamic Programming?","url":"/Programming/Dynamic Programming/","items":[]},{"title":"Example problem: Min Rewards (hard pb)","url":"/Programming/Peak and Valleys/","items":[]},{"title":"Quicksort","url":"/Programming/Quicksort/","items":[]}]},{"title":"Python","url":"","items":[{"title":"Dictionary","url":"/Python/Dictionary/","items":[]},{"title":"Is Python Compiled or Interpreted Language","url":"/Python/Is Python Compiled or Interpreted language/","items":[]},{"title":"Pkg Manager","url":"","items":[{"title":"Main Commands","url":"/Python/pkg manager/Conda/","items":[]},{"title":"Mamba","url":"/Python/pkg manager/Mamba/","items":[]},{"title":"PIP","url":"/Python/pkg manager/PIP/","items":[]}]},{"title":"References","url":"/Python/GIL/","items":[]}]},{"title":"Week 1","url":"/Coursera - Learning How to Learn/","items":[]}]}],"tagsGroups":[],"latestPosts":[{"fields":{"slug":"/Python/GIL/","title":"References","lastUpdatedAt":"2022-06-04T20:21:58.000Z","lastUpdated":"6/4/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Engineering/Replication/","title":"Replication","lastUpdatedAt":"2022-06-02T10:26:57.000Z","lastUpdated":"6/2/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Engineering/Sharding or Partitioning/","title":"Sharding or Partitioning","lastUpdatedAt":"2022-06-02T10:26:57.000Z","lastUpdated":"6/2/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/books/All of Statistics - Larry - Unfinished/Chapter 1/","title":"Exercices","lastUpdatedAt":"2022-06-02T10:26:57.000Z","lastUpdated":"6/2/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/books/Design Data Intensive Apps/Ch 4 Encoding and Evolution/","title":"Formats for Encoding Data","lastUpdatedAt":"2022-06-02T10:26:57.000Z","lastUpdated":"6/2/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/books/Design Data Intensive Apps/Ch 5 Replication/","title":"Ch 5 Replication","lastUpdatedAt":"2022-06-02T10:26:57.000Z","lastUpdated":"6/2/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/books/Design Data Intensive Apps/test slides/","title":"Hello world","lastUpdatedAt":"2022-06-02T10:26:57.000Z","lastUpdated":"6/2/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/","title":"Brain Dam","lastUpdatedAt":"2022-05-27T09:26:10.000Z","lastUpdated":"5/27/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/ML/Determinant/","title":"Determinant","lastUpdatedAt":"2022-05-27T09:26:10.000Z","lastUpdated":"5/27/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Courses/AlgoExpert/Algo Expert - Behavioral interview/","title":"General tips","lastUpdatedAt":"2022-05-27T09:26:10.000Z","lastUpdated":"5/27/2022"},"frontmatter":{"draft":false,"tags":[]}}]}},
    "staticQueryHashes": ["2230547434","2320115945","3495835395","451533639"]}