{
    "componentChunkName": "component---node-modules-gatsby-theme-primer-wiki-src-templates-post-query-js",
    "path": "/Engineering/Idempotent Operation/",
    "result": {"data":{"mdx":{"id":"a9f93d8a-dc6f-53b1-a6ac-8ecaf19e6968","tableOfContents":{},"fields":{"title":"Idempotent Operation","slug":"/Engineering/Idempotent Operation/","url":"https://thomassajot.brain-dam.com/brain-dam/Engineering/Idempotent Operation/","editUrl":"https://github.com/theowenyoung/obsidian-template-gatsby-theme-primer-wiki/tree/main/Engineering/Idempotent Operation.md","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022","gitCreatedAt":"2022-02-03T13:24:53.000Z","shouldShowTitle":true},"frontmatter":{"title":"","description":null,"imageAlt":null,"tags":[],"date":null,"dateModified":null,"language":null,"seoTitle":null,"image":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"An Operation that has the same ultimate outcome regardless of how many times it's performed. For example buying 5 times the same item should only charge the user once. Operations performed through a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Engineering/Publish-Subscribe%20Pattern/\",\n    \"title\": \"Pub/Sub\"\n  }, \"Pub/Sub\"), \" messaging system typically have to be idempotent, since Pub/Sub systems tend to allow the same messages to be consumed multiple times..\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-mermaid\"\n  }, \"graph TD\\nStart\\nNS((\\\"New state\\\"))\\n\\nStart --\\\"apply method\\\"--> NS\\nNS --\\\"apply method\\\"--> NS\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"An Operation that has the same ultimate outcome regardless of how many times it's performed. For example buying 5 times the same item should only charge the user once. Operations performed through a [[Publish-Subscribe Pattern|Pub/Sub]] messaging system typically have to be idempotent, since Pub/Sub systems tend to allow the same messages to be consumed multiple times..\n\n```mermaid \ngraph TD\nStart\nNS((\"New state\"))\n\nStart --\"apply method\"--> NS\nNS --\"apply method\"--> NS\n\n```","excerpt":"An Operation that has the same ultimate outcome regardless of how many times it's performed. For example buying 5 times the same item shoulâ€¦","outboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-mermaid\"\n  }, \"graph TD\\nP1((P1))\\nP2((P2))\\nP3((P3))\\n\\nT1[[T1]]\\nT2[[T2]]\\nT3[[T3]]\\n\\nS1((S1))\\nS2((S2))\\nS2((S3))\\n\\nP1 --Push--> T1\\nP2 --Push--> T2\\nP3 --Push--> T3\\n\\nS1 --Pull--> T1\\nS2 --Pull--> T1\\nS3 --Pull--> T3\\n\")), mdx(\"p\", null, \"4 entities:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Publishers\"), \": Servers publishing data (in the form of messages) into Topics.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Subscribers\"), \": Clients that subscribes to Topics.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Topics\"), \": Conceptual Channels of specific information.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Message\"), \": Represents the data that is relevant to the Subscriber to get/process.\")), mdx(\"p\", null, \"This is closely related to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Engineering/Polling%20and%20Streaming/\",\n    \"title\": \"Streaming\"\n  }, \"Streaming\"), \".\"), mdx(\"p\", null, \"A Pub/Sub system is like a DB. You are guaranteed at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"least once\"), \" delivery to a subscriber. This can lead to issues where the same message is send multiple times to the same server. This issue enforces the subscriber to have \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Engineering/Idempotent%20Operation/\",\n    \"title\": \"Idempotent Operation\"\n  }, \"Idempotent Operation\"), \".\"), mdx(\"h3\", {\n    \"id\": \"additional-property\"\n  }, \"Additional property:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Messages are send to Subscribers in the same order as they come in. This is the behavior of a queue.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is possible to \\\"replay\\\" messages.\")), mdx(\"h3\", {\n    \"id\": \"why-do-we-need-multiple-topics-\"\n  }, \"Why do we need multiple topics ?\"), mdx(\"p\", null, \"Pub/Sub is like a Database, which means that we may want to have multiple \\\"tables\\\" (as in SQL). So for each type of data, we want to have multiple topics. These topics have different sets of subscribers.\"), mdx(\"h1\", {\n    \"id\": \"tools\"\n  }, \"Tools\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Apache Kafka\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Google Cloud pub/sub: Topics scales automatically, sharding at a topic level is handled automatically.\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/Engineering/Publish-Subscribe Pattern/","title":"Tools","shouldShowTitle":false}}],"inboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"MapReduce is based on the assumptions that most data processing tasks can be split up into a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map\"), \" and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reduce\"), \" functions.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-mermaid\"\n  }, \"graph LR\\n\\nAA(('AA'))\\nAB(('AB'))\\nAAC(('AAC'))\\nBBB(('BBB'))\\n\\nKV1((\\\"k/v<br>pairs\\\"))\\nKV2((\\\"k/v<br>pairs\\\"))\\nKV3((\\\"k/v<br>pairs\\\"))\\nKV4((\\\"k/v<br>pairs\\\"))\\n\\nN1((\\\"A\\\"))\\nN2((\\\"B\\\"))\\nN3((\\\"C\\\"))\\n\\nOutput((\\\"Output\\\"))\\n\\nAA --Map--> KV1\\nAB --Map--> KV2\\nAAC --Map--> KV3\\nBBB --Map--> KV4\\n\\nKV1 --Shuffle--> N1\\nKV2 --Shuffle--> N1\\nKV2 --Shuffle--> N2\\nKV3 --Shuffle--> N1\\nKV3 --Shuffle--> N3\\nKV4 --Shuffle--> N2\\n\\nN1 --Reduce--> Output\\nN2 --Reduce--> Output\\nN3 --Reduce--> Output\\n\\n\")), mdx(\"p\", null, \"Do not forget, there is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shuffle\"), \" step between the Map and Reduce step !\"), mdx(\"h1\", {\n    \"id\": \"important-points\"\n  }, \"Important points\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"When dealing with MapReduce model, we assume we have a distributed file system. And the distributed FS has knowledge of where the data chunks reside and how to communicate with the machine that are going to apply the Map Operation (the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"workers\"), \").\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Because we have large dataset, we do not want to move the data, we move the Map operation (the map program) on the machines that contains the data.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The Key-value pair after a Map operation is very important. The Reduce step relies on the Key to \\\"reduce\\\" / aggregate the data.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"MapReduce handles failures by re-doing a Map or Reduce operation. Hence our Map and Reduce functions are \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Engineering/Idempotent%20Operation/\",\n    \"title\": \" idempotent\"\n  }, \" idempotent\"), \" !  (they do not change an external state)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"As an engineer dealing with a MapReduce job, what we care about is specifying Map and Reduce functions and their inputs / outputs.\")), mdx(\"h1\", {\n    \"id\": \"reference\"\n  }, \"Reference\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf\"\n  }, \"MapReduce original white Paper\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/Engineering/MapReduce/","title":"Important points"}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-mermaid\"\n  }, \"graph TD\\nP1((P1))\\nP2((P2))\\nP3((P3))\\n\\nT1[[T1]]\\nT2[[T2]]\\nT3[[T3]]\\n\\nS1((S1))\\nS2((S2))\\nS2((S3))\\n\\nP1 --Push--> T1\\nP2 --Push--> T2\\nP3 --Push--> T3\\n\\nS1 --Pull--> T1\\nS2 --Pull--> T1\\nS3 --Pull--> T3\\n\")), mdx(\"p\", null, \"4 entities:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Publishers\"), \": Servers publishing data (in the form of messages) into Topics.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Subscribers\"), \": Clients that subscribes to Topics.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Topics\"), \": Conceptual Channels of specific information.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Message\"), \": Represents the data that is relevant to the Subscriber to get/process.\")), mdx(\"p\", null, \"This is closely related to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Engineering/Polling%20and%20Streaming/\",\n    \"title\": \"Streaming\"\n  }, \"Streaming\"), \".\"), mdx(\"p\", null, \"A Pub/Sub system is like a DB. You are guaranteed at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"least once\"), \" delivery to a subscriber. This can lead to issues where the same message is send multiple times to the same server. This issue enforces the subscriber to have \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Engineering/Idempotent%20Operation/\",\n    \"title\": \"Idempotent Operation\"\n  }, \"Idempotent Operation\"), \".\"), mdx(\"h3\", {\n    \"id\": \"additional-property\"\n  }, \"Additional property:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Messages are send to Subscribers in the same order as they come in. This is the behavior of a queue.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is possible to \\\"replay\\\" messages.\")), mdx(\"h3\", {\n    \"id\": \"why-do-we-need-multiple-topics-\"\n  }, \"Why do we need multiple topics ?\"), mdx(\"p\", null, \"Pub/Sub is like a Database, which means that we may want to have multiple \\\"tables\\\" (as in SQL). So for each type of data, we want to have multiple topics. These topics have different sets of subscribers.\"), mdx(\"h1\", {\n    \"id\": \"tools\"\n  }, \"Tools\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Apache Kafka\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Google Cloud pub/sub: Topics scales automatically, sharding at a topic level is handled automatically.\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/Engineering/Publish-Subscribe Pattern/","title":"Tools"}}]},"tagsOutbound":{"nodes":[]}},"pageContext":{"tags":[],"slug":"/Engineering/Idempotent Operation/","sidebarItems":[{"title":"Categories","items":[{"title":"Azure","url":"","items":[{"title":"Azure Pipeline","url":"/Azure/Azure pipeline/","items":[]},{"title":"Documentation","url":"/Azure/Azure-ml/","items":[]}]},{"title":"Brain Dam: Keeping information Upd","url":"/","items":[]},{"title":"Engineering","url":"","items":[{"title":"ACID","url":"/Engineering/Relational Databases/","items":[]},{"title":"API Design","url":"/Engineering/API Design/","items":[]},{"title":"Blob Store","url":"/Engineering/Specialized Storage Paradigms/","items":[]},{"title":"Cache for read","url":"/Engineering/Caching/","items":[]},{"title":"Client-Server Model","url":"/Engineering/Client-Server Model/","items":[]},{"title":"Configuration","url":"/Engineering/Configuration/","items":[]},{"title":"Consistent hashing with bounded load","url":"/Engineering/Consistent hashing/","items":[]},{"title":"Distributed Hash Table","url":"/Engineering/Distributed Hash Table/","items":[]},{"title":"Encryption","url":"/Engineering/Security and HTTPS/","items":[]},{"title":"Etcd","url":"/Engineering/Etcd/","items":[]},{"title":"Feature Flags","url":"/Engineering/Feature Flags/","items":[]},{"title":"Forward Proxy","url":"/Engineering/Proxies/","items":[]},{"title":"How does the load balancer work ?","url":"/Engineering/Load Balancer/","items":[]},{"title":"How to implement Leader election for your service ?","url":"/Engineering/Leader Election/","items":[]},{"title":"Idempotent Operation","url":"/Engineering/Idempotent Operation/","items":[]},{"title":"Important points","url":"/Engineering/MapReduce/","items":[]},{"title":"Latency","url":"/Engineering/Latency and Throughput/","items":[]},{"title":"Logging","url":"/Engineering/Logging and Monitoring/","items":[]},{"title":"Other strategy","url":"/Engineering/Jump hashing/","items":[]},{"title":"Other strategy","url":"/Engineering/Rendez-vous Hashing/","items":[]},{"title":"Polling","url":"/Engineering/Polling and Streaming/","items":[]},{"title":"Prometheus","url":"/Engineering/Prometheus/","items":[]},{"title":"Redis","url":"/Engineering/Redis/","items":[]},{"title":"Replication","url":"/Engineering/Replication and Sharding/","items":[]},{"title":"SLA / SLO","url":"/Engineering/Availability/","items":[]},{"title":"Socket","url":"/Engineering/Socket/","items":[]},{"title":"Storage Concept","url":"/Engineering/Storage concept/","items":[]},{"title":"Tools","url":"/Engineering/Key-Value Stores/","items":[]},{"title":"Tools","url":"/Engineering/Peer-To-Peer Networks/","items":[]},{"title":"Tools","url":"/Engineering/Publish-Subscribe Pattern/","items":[]},{"title":"Tools","url":"/Engineering/Rate Limiting/","items":[]},{"title":"Zookeeper","url":"/Engineering/Zookeeper/","items":[]}]},{"title":"ML","url":"","items":[{"title":"Constrained Optimization","url":"/ML/Constrained optimization/","items":[]},{"title":"Coordinate Descent","url":"/ML/Coordinate descent/","items":[]},{"title":"Determinant","url":"/ML/Determinant/","items":[]},{"title":"Dirichlet Distribution","url":"/ML/Dirichlet distribution/","items":[]},{"title":"Eigendecomposition","url":"/ML/Eigendecomposition/","items":[]},{"title":"Exploitation vs exploration","url":"/ML/Multi-armed bandit (AB testing)/","items":[]},{"title":"Frequentist A/B testing","url":"/ML/Frequentist AB testing/","items":[]},{"title":"Gradient","url":"/ML/Gradient/","items":[]},{"title":"Gradient Descend","url":"/ML/Gradient Descend/","items":[]},{"title":"Graph Neural Network","url":"/ML/GNN/","items":[]},{"title":"Hessian","url":"/ML/Hessian/","items":[]},{"title":"Jacobian","url":"/ML/Jacobian/","items":[]},{"title":"Kernel Trick","url":"/ML/Kernel Trick/","items":[]},{"title":"KKT conditions","url":"/ML/KKT/","items":[]},{"title":"Line Search","url":"/ML/Line Search/","items":[]},{"title":"Links","url":"/ML/Latent Dirichlet Allocation/","items":[]},{"title":"Maths","url":"/ML/PCA/","items":[]},{"title":"Matrix Inverse","url":"/ML/Matrix inverse/","items":[]},{"title":"Moore-Penrose Pseudoinverse","url":"/ML/Moore-Penrose Pseudoinverse/","items":[]},{"title":"Naive Bayes Classifier","url":"/ML/Naive Bayes Classifier/","items":[]},{"title":"Newton's Method","url":"/ML/Newton's method/","items":[]},{"title":"Norms","url":"/ML/Norms/","items":[]},{"title":"Overview","url":"/ML/RANSAC/","items":[]},{"title":"Parameter Estimation","url":"/ML/Parameter estimation/","items":[]},{"title":"Positive Definite Matrix","url":"/ML/Positive Definite Matrix/","items":[]},{"title":"Regression Losses","url":"/ML/Regression losses/","items":[]},{"title":"Singular Value Decomposition (SVD)","url":"/ML/Singular Value Decomposition (SVD)/","items":[]},{"title":"Symmetric Matrix","url":"/ML/Symmetric matrix/","items":[]},{"title":"Tool","url":"/ML/Bayesian AB testing/","items":[]},{"title":"Trace of Matrix","url":"/ML/Trace of matrix/","items":[]},{"title":"Trust Region","url":"/ML/trust region/","items":[]},{"title":"Variance and Standard Error","url":"/ML/Variance and Standard error/","items":[]}]},{"title":"Papers","url":"","items":[{"title":"Questions","url":"/Papers/VICREG  variance-invariance-covariance regulaization for self-supervised Learning/","items":[]}]},{"title":"Programming","url":"","items":[{"title":"Example problem: Min Rewards (hard pb)","url":"/Programming/Peak and Valleys/","items":[]}]},{"title":"Python","url":"","items":[{"title":"Dictionary","url":"/Python/Dictionary/","items":[]},{"title":"Is Python Compiled or Interpreted Language","url":"/Python/Is Python Compiled or Interpreted language/","items":[]},{"title":"Pkg Manager","url":"","items":[{"title":"Main Commands","url":"/Python/pkg manager/Conda/","items":[]},{"title":"Mamba","url":"/Python/pkg manager/Mamba/","items":[]},{"title":"PIP","url":"/Python/pkg manager/PIP/","items":[]}]}]},{"title":"Start Here","url":"/Start here/","items":[]},{"title":"Week 1","url":"/Coursera - Learning How to Learn/","items":[]}]}],"tagsGroups":[],"latestPosts":[{"fields":{"slug":"/Engineering/Distributed Hash Table/","title":"Distributed Hash Table","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Engineering/Feature Flags/","title":"Feature Flags","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Engineering/Prometheus/","title":"Prometheus","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/ML/Gradient Descend/","title":"Gradient Descend","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Coursera - Learning How to Learn/","title":"Week 1","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Azure/Azure pipeline/","title":"Azure Pipeline","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Azure/Azure-ml/","title":"Documentation","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Engineering/API Design/","title":"API Design","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Engineering/Availability/","title":"SLA / SLO","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Engineering/Caching/","title":"Cache for read","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}}]}},
    "staticQueryHashes": ["2230547434","2320115945","3495835395","451533639"]}