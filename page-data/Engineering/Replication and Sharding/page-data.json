{
    "componentChunkName": "component---node-modules-gatsby-theme-primer-wiki-src-templates-post-query-js",
    "path": "/Engineering/Replication and Sharding/",
    "result": {"data":{"mdx":{"id":"589cce54-afd8-56ec-bca3-4eef6d22ce4a","tableOfContents":{"items":[{"url":"#replication","title":"Replication","items":[{"url":"#synchronous-update","title":"Synchronous update"},{"url":"#async-update","title":"Async update"}]},{"url":"#sharding","title":"Sharding","items":[{"url":"#hotspots","title":"Hotspots"}]},{"url":"#references","title":"References"}]},"fields":{"title":"Replication","slug":"/Engineering/Replication and Sharding/","url":"https://demo-obsidian.owenyoung.com/Engineering/Replication and Sharding/","editUrl":"https://github.com/theowenyoung/obsidian-template-gatsby-theme-primer-wiki/tree/main/Engineering/Replication and Sharding.md","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022","gitCreatedAt":"2022-02-03T13:24:53.000Z","shouldShowTitle":false},"frontmatter":{"title":"","description":null,"imageAlt":null,"tags":[],"date":null,"dateModified":null,"language":null,"seoTitle":null,"image":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A system's performance is often only as good as its database's; optimize the latter, and watch as the former improves in tandem!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-mermaid\"\n  }, \"graph LR\\n\\nMD((\\\"Main DB\\\"))\\nReplica((Replica))\\n\\nMD --Sync-->Replica\\nMD -.Async.-> Replica\\n\")), mdx(\"h1\", null, \"Replication\"), mdx(\"p\", null, \"If the DB goes down, the system is down as well because we cannot read from DB. To solve for this, we can have a duplicate / replica of the original DB, this is a standby of the real DB. The main DB ensures the replica is up to date.\"), mdx(\"p\", null, \"How to we keep the replica up to date ?   \"), mdx(\"h2\", null, \"Synchronous update\"), mdx(\"p\", null, \"Whenever there is an update of the main DB, the replica is updated synchronously. If the replica update fails, the write command fails for the main DB fails as well.\"), mdx(\"p\", null, \"We can also use replication to improve the latency of the DB.\"), mdx(\"h2\", null, \"Async update\"), mdx(\"p\", null, \"It is possible to update the replica asynchronously. This is ok if we do not need the replicas to be super up to date (like Linkedin posts).\"), mdx(\"h1\", null, \"Sharding\"), mdx(\"p\", null, \"To improve [\", \"[Latency and Throughput|throughput]\", \"] you can increase the replicas of a DB but this is limiting if the database if huge. So you may want to replicate specific subset of the data. Splitting the data across databases. Partitioning the data (this splitting) is known as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sharding\"), \".\"), mdx(\"p\", null, \"How do you know how to split the data and where to put it ?\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"For example with tables, you can split up certain rows into different shards, for example by customer name.\"), mdx(\"h2\", null, \"Hotspots\"), mdx(\"p\", null, \"Some shards may get more traffic than other just by chance.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"You use hashing function to determine what shard a piece of data is gonna be written to and read from. [\", \"[Consistent hashing]\", \"] may be useful here, depending on the problem.\"), mdx(\"p\", null, \"This logic of choosing how to do the sharding, you could implement it in the server that does the service itself. But in practice, this logic is implemented in a [\", \"[Proxies|Reverse Proxy]\", \"] that acts on behalf of the DB.\"), mdx(\"h1\", null, \"References\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/azure/architecture/patterns/sharding\"\n  }, \"Azure sharding doc\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"A system's performance is often only as good as its database's; optimize the latter, and watch as the former improves in tandem!\n\n```mermaid \ngraph LR\n\nMD((\"Main DB\"))\nReplica((Replica))\n\nMD --Sync-->Replica\nMD -.Async.-> Replica\n```\n\n# Replication\nIf the DB goes down, the system is down as well because we cannot read from DB. To solve for this, we can have a duplicate / replica of the original DB, this is a standby of the real DB. The main DB ensures the replica is up to date.\n\nHow to we keep the replica up to date ?   \n## Synchronous update\nWhenever there is an update of the main DB, the replica is updated synchronously. If the replica update fails, the write command fails for the main DB fails as well.\n\nWe can also use replication to improve the latency of the DB.\n\n## Async update\nIt is possible to update the replica asynchronously. This is ok if we do not need the replicas to be super up to date (like Linkedin posts).\n\n# Sharding\nTo improve [[Latency and Throughput|throughput]] you can increase the replicas of a DB but this is limiting if the database if huge. So you may want to replicate specific subset of the data. Splitting the data across databases. Partitioning the data (this splitting) is known as **sharding**.\n\nHow do you know how to split the data and where to put it ?  \nFor example with tables, you can split up certain rows into different shards, for example by customer name.\n\n## Hotspots\nSome shards may get more traffic than other just by chance.  \nYou use hashing function to determine what shard a piece of data is gonna be written to and read from. [[Consistent hashing]] may be useful here, depending on the problem.\n\nThis logic of choosing how to do the sharding, you could implement it in the server that does the service itself. But in practice, this logic is implemented in a [[Proxies|Reverse Proxy]] that acts on behalf of the DB.\n\n\n# References\n[Azure sharding doc](https://docs.microsoft.com/en-us/azure/architecture/patterns/sharding)","excerpt":"A system's performance is often only as good as its database's; optimize the latter, and watch as the former improves in tandem! Replicatioâ€¦","outboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.toptal.com/big-data/consistent-hashing\"\n  }, \"High level explanation\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.openstack.org/swift/latest/ring_background.html\"\n  }, \"Tutorial with more details\")), mdx(\"p\", null, \"General Idea:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Hash all the servers IDs (UUID, IP address, ...) and \\\"map\\\" them onto the unit circle.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Hash the object you want to save (like username). Then \\\"map\\\" this hash onto the unit circle\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The location where to store an object is on the closest server on the unit circle in the anti-clockwise direction (for example). \")), mdx(\"p\", null, \"If a node crashes, we need only to move this nodes data, ie \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"K/N\"), \" values, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"K\"), \" being the number of keys and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"N\"), \" the number of nodes / servers in the pool.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Example of 3 servers 5 keys to be mapped.\\n![\", \"[Pasted image 20211110210818.png|700]\", \"]\"), mdx(\"p\", null, \"It is better to have multiple hashes for a given servers (10x, 50x, 1000x ?) so that selecting the closest server for an object is more uniform. The number of keys per servers (10x, ...) depends on the server capacity. This is called the servers \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"weight\"), \".\\nExample of 3 servers with 10 keys per server.\\n![\", \"[Pasted image 20211110211244.png|700]\", \"]\"), mdx(\"h1\", null, \"Consistent hashing with bounded load\"), mdx(\"h1\", null, \"Questions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How do you support duplication over multiple server to be resilient if a machine goes down ? Maybe we can assign a key to the 2 closest servers in the circle ? z\")), mdx(\"h1\", null, \"Other strategy\"), mdx(\"p\", null, \"See [\", \"[Rendez-vous Hashing]\", \"]\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"See [\", \"[Jump hashing]\", \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/Engineering/Consistent hashing/","title":"Consistent hashing with bounded load","shouldShowTitle":false}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Measure of performance of a system\"), mdx(\"h1\", null, \"Latency\"), mdx(\"p\", null, \"how long it takes for data to go through a system. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"- network request  from client to server and back to client.\\n- Time taken to read data:   \\n    reading 1MB from memory: $2~\\\\micro\\\\text{seconds}$   \\n    reading 1MB from SSD: $1000 ~\\\\micro \\\\text{ seconds}$  \\n    reading 1MB from 1GB/s network : $10,000 ~\\\\micro \\\\text{ seconds}$  \\n    reading 1MB from HDD : $20,000 ~\\\\micro \\\\text{ seconds}$  \\n    send a packet from California to Netherlands and back : $150,000 ~\\\\micro \\\\text{ seconds}$\\n    \\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-mermaid\"\n  }, \"graph LR\\nClient\\nServer\\n\\nClient --> Server\\nServer --> Client\\n\")), mdx(\"h1\", null, \"Throughput\"), mdx(\"p\", null, \"How much data can be send through the system over a given amount of time.\"), mdx(\"p\", null, \"How to optimize for throughput: you can party for it to increase the number of servers.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-mermaid\"\n  }, \"graph TD\\nClient_1\\nClient_2\\nClient_3\\n...\\nClient_N\\n\\nServer\\n\\n\\nClient_1 --> Server\\nClient_2 --> Server\\nClient_3 --> Server\\n... --> Server\\nClient_N --> Server\\n\")), mdx(\"p\", null, \"Latency and Throughput are not correlated.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/Engineering/Latency and Throughput/","title":"Latency","shouldShowTitle":false}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Forward\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Reverse\"), \" proxies. By default a proxy is a forward proxy.\"), mdx(\"h1\", null, \"Forward Proxy\"), mdx(\"p\", null, \"A Forward Proxy (FP) is a server that is between a client (or a set of clients) and another server (or a set of servers). A FP is a server that acts on behalf of client(s). A FP is on the client's side. If a client wants to communicate with a server, when a client issues a request to the server, it goes to the proxy and the proxy forwards the request to the server. The server gets the request from the FP, when the server responses, it replies to the proxy and the proxy sends the replies to the client.\"), mdx(\"p\", null, \"So to the server, the server does not know the IP of the client, but the proxy only.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-mermaid\"\n  }, \"graph LR\\nClient\\nFP[\\\"(Foward) Proxy\\\"]\\nServer\\n\\nClient --1--> FP\\nFP --2--> Server\\nServer --3--> FP\\nFP --4--> Client\\n\")), mdx(\"h1\", null, \"Reverse Proxy\"), mdx(\"p\", null, \"A Reverse Proxy (RP) acts on behalf of a Server. If a client wants to send a request to a server, if the RP is set up properly, the RP will get the requests (while the clients thinks its going to the server). \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-mermaid\"\n  }, \"graph LR\\nClient\\nFP[\\\"(Reverse) Proxy\\\"]\\nServer\\n\\nClient --1--> FP\\nFP --2--> Server\\nServer --3--> FP\\nFP --4--> Client\\n\")), mdx(\"p\", null, \"The key thing is that the client \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"THINKS\"), \" that it is communicating with the server. This is the difference with FP.\"), mdx(\"p\", null, \"RP are very useful. For example a RP can filter out request you want to ignore. it can log / collect metrics, cache html pages.\\none of a best use case is to do [\", \"[Load Balancer | load balancing]\", \"].\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/Engineering/Proxies/","title":"Forward Proxy","shouldShowTitle":false}}],"inboundReferences":[]},"tagsOutbound":{"nodes":[]}},"pageContext":{"tags":[],"slug":"/Engineering/Replication and Sharding/","sidebarItems":[{"title":"Categories","items":[{"title":"Azure","url":"","items":[{"title":"Azure Pipeline","url":"/Azure/Azure pipeline/","items":[]},{"title":"Documentation","url":"/Azure/Azure-ml/","items":[]}]},{"title":"Brain Dam: Keeping information Upd","url":"/","items":[]},{"title":"Engineering","url":"","items":[{"title":"ACID","url":"/Engineering/Relational Databases/","items":[]},{"title":"API Design","url":"/Engineering/API Design/","items":[]},{"title":"Blob Store","url":"/Engineering/Specialized Storage Paradigms/","items":[]},{"title":"Cache for read","url":"/Engineering/Caching/","items":[]},{"title":"Client-Server Model","url":"/Engineering/Client-Server Model/","items":[]},{"title":"Configuration","url":"/Engineering/Configuration/","items":[]},{"title":"Consistent hashing with bounded load","url":"/Engineering/Consistent hashing/","items":[]},{"title":"Distributed Hash Table","url":"/Engineering/Distributed Hash Table/","items":[]},{"title":"Encryption","url":"/Engineering/Security and HTTPS/","items":[]},{"title":"Etcd","url":"/Engineering/Etcd/","items":[]},{"title":"Feature Flags","url":"/Engineering/Feature Flags/","items":[]},{"title":"Forward Proxy","url":"/Engineering/Proxies/","items":[]},{"title":"How does the load balancer work ?","url":"/Engineering/Load Balancer/","items":[]},{"title":"How to implement Leader election for your service ?","url":"/Engineering/Leader Election/","items":[]},{"title":"Idempotent Operation","url":"/Engineering/Idempotent Operation/","items":[]},{"title":"Important points","url":"/Engineering/MapReduce/","items":[]},{"title":"Latency","url":"/Engineering/Latency and Throughput/","items":[]},{"title":"Logging","url":"/Engineering/Logging and Monitoring/","items":[]},{"title":"Other strategy","url":"/Engineering/Jump hashing/","items":[]},{"title":"Other strategy","url":"/Engineering/Rendez-vous Hashing/","items":[]},{"title":"Polling","url":"/Engineering/Polling and Streaming/","items":[]},{"title":"Prometheus","url":"/Engineering/Prometheus/","items":[]},{"title":"Redis","url":"/Engineering/Redis/","items":[]},{"title":"Replication","url":"/Engineering/Replication and Sharding/","items":[]},{"title":"SLA / SLO","url":"/Engineering/Availability/","items":[]},{"title":"Socket","url":"/Engineering/Socket/","items":[]},{"title":"Storage Concept","url":"/Engineering/Storage concept/","items":[]},{"title":"Tools","url":"/Engineering/Key-Value Stores/","items":[]},{"title":"Tools","url":"/Engineering/Peer-To-Peer Networks/","items":[]},{"title":"Tools","url":"/Engineering/Publish-Subscribe Pattern/","items":[]},{"title":"Tools","url":"/Engineering/Rate Limiting/","items":[]},{"title":"Zookeeper","url":"/Engineering/Zookeeper/","items":[]}]},{"title":"ML","url":"","items":[{"title":"Constrained Optimization","url":"/ML/Constrained optimization/","items":[]},{"title":"Coordinate Descent","url":"/ML/Coordinate descent/","items":[]},{"title":"Determinant","url":"/ML/Determinant/","items":[]},{"title":"Dirichlet Distribution","url":"/ML/Dirichlet distribution/","items":[]},{"title":"Eigendecomposition","url":"/ML/Eigendecomposition/","items":[]},{"title":"Exploitation vs exploration","url":"/ML/Multi-armed bandit (AB testing)/","items":[]},{"title":"Frequentist A/B testing","url":"/ML/Frequentist AB testing/","items":[]},{"title":"Gradient","url":"/ML/Gradient/","items":[]},{"title":"Gradient Descend","url":"/ML/Gradient Descend/","items":[]},{"title":"Graph Neural Network","url":"/ML/GNN/","items":[]},{"title":"Hessian","url":"/ML/Hessian/","items":[]},{"title":"Jacobian","url":"/ML/Jacobian/","items":[]},{"title":"Kernel Trick","url":"/ML/Kernel Trick/","items":[]},{"title":"KKT conditions","url":"/ML/KKT/","items":[]},{"title":"Line Search","url":"/ML/Line Search/","items":[]},{"title":"Links","url":"/ML/Latent Dirichlet Allocation/","items":[]},{"title":"Maths","url":"/ML/PCA/","items":[]},{"title":"Matrix Inverse","url":"/ML/Matrix inverse/","items":[]},{"title":"Moore-Penrose Pseudoinverse","url":"/ML/Moore-Penrose Pseudoinverse/","items":[]},{"title":"Naive Bayes Classifier","url":"/ML/Naive Bayes Classifier/","items":[]},{"title":"Newton's Method","url":"/ML/Newton's method/","items":[]},{"title":"Norms","url":"/ML/Norms/","items":[]},{"title":"Overview","url":"/ML/RANSAC/","items":[]},{"title":"Parameter Estimation","url":"/ML/Parameter estimation/","items":[]},{"title":"Positive Definite Matrix","url":"/ML/Positive Definite Matrix/","items":[]},{"title":"Regression Losses","url":"/ML/Regression losses/","items":[]},{"title":"Singular Value Decomposition (SVD)","url":"/ML/Singular Value Decomposition (SVD)/","items":[]},{"title":"Symmetric Matrix","url":"/ML/Symmetric matrix/","items":[]},{"title":"Tool","url":"/ML/Bayesian AB testing/","items":[]},{"title":"Trace of Matrix","url":"/ML/Trace of matrix/","items":[]},{"title":"Trust Region","url":"/ML/trust region/","items":[]},{"title":"Variance and Standard Error","url":"/ML/Variance and Standard error/","items":[]}]},{"title":"Papers","url":"","items":[{"title":"Questions","url":"/Papers/VICREG  variance-invariance-covariance regulaization for self-supervised Learning/","items":[]}]},{"title":"Programming","url":"","items":[{"title":"Example problem: Min Rewards (hard pb)","url":"/Programming/Peak and Valleys/","items":[]}]},{"title":"Python","url":"","items":[{"title":"Dictionary","url":"/Python/Dictionary/","items":[]},{"title":"Is Python Compiled or Interpreted Language","url":"/Python/Is Python Compiled or Interpreted language/","items":[]},{"title":"Pkg Manager","url":"","items":[{"title":"Main Commands","url":"/Python/pkg manager/Conda/","items":[]},{"title":"Mamba","url":"/Python/pkg manager/Mamba/","items":[]},{"title":"PIP","url":"/Python/pkg manager/PIP/","items":[]}]}]},{"title":"Start Here","url":"/Start here/","items":[]},{"title":"Week 1","url":"/Coursera - Learning How to Learn/","items":[]}]}],"tagsGroups":[],"latestPosts":[{"fields":{"slug":"/Engineering/Distributed Hash Table/","title":"Distributed Hash Table","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Engineering/Feature Flags/","title":"Feature Flags","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Engineering/Prometheus/","title":"Prometheus","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/ML/Gradient Descend/","title":"Gradient Descend","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Coursera - Learning How to Learn/","title":"Week 1","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Azure/Azure pipeline/","title":"Azure Pipeline","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Azure/Azure-ml/","title":"Documentation","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Engineering/API Design/","title":"API Design","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Engineering/Availability/","title":"SLA / SLO","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Engineering/Caching/","title":"Cache for read","lastUpdatedAt":"2022-02-03T13:24:53.000Z","lastUpdated":"2/3/2022"},"frontmatter":{"draft":false,"tags":[]}}]}},
    "staticQueryHashes": ["2230547434","2320115945","3495835395","451533639"]}